D:\Desktop\g_api\main.py 
import uvicorn
from fastapi import FastAPI, Body, HTTPException, Depends
from starlette.responses import HTMLResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import logging
from database.database import SessionLocal, init_db
from database.models import Post, User
from app.model import PostSchema, UserSchema, UserLoginSchema
from app.auth.jwt_handler import signJWT
from app.auth.jwt_bearer import JWTBearer



# Configure the logger
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name=s) - %(levelname=s) - %(message=s)',
                    handlers=[
                        logging.FileHandler("app.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# Create a FastAPI "instance"
app = FastAPI()

# Dependency to get the DB session
async def get_db():
    async with SessionLocal() as session:
        yield session

@app.on_event("startup")
async def on_startup():
    await init_db()

@app.get("/", tags=["test"], response_class=HTMLResponse)
async def root():
    html_content = """
    <html>
    <head>
        <title>Root</title>
    </head>
    <body>
        <h1>Welcome to the Geodata API!</h1>
        <p>This is an HTML representation of the root endpoint.</p>
        <p><a href="/docs">Click here to go to the documentation</a></p>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/posts", tags=["posts"])
async def get_posts(db: AsyncSession = Depends(get_db)):
    logger.info("Posts endpoint called")
    result = await db.execute(select(Post))
    posts = result.scalars().all()
    return posts

@app.get("/posts/{id}", tags=["posts"])
async def get_post(id: int, db: AsyncSession = Depends(get_db)):
    logger.info(f"Post/{id} endpoint called")
    result = await db.execute(select(Post).filter(Post.id == id))
    post = result.scalar_one_or_none()
    if post is None:
        raise HTTPException(status_code=404, detail="Post not found")
    return post


from fastapi import FastAPI, Body, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import logging
from database.database import SessionLocal
from app.model import PostSchema
from app.auth.jwt_bearer import JWTBearer
from database.models import Post, User

# Configure the logger
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name=s) - %(levelname=s) - %(message=s)',
                    handlers=[
                        logging.FileHandler("app.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# Create a FastAPI "instance"
app = FastAPI()

# Dependency to get the DB session
async def get_db():
    async with SessionLocal() as session:
        yield session

# Route to post a new post, requires authentication
@app.post("/posts1", dependencies=[Depends(JWTBearer())], tags=["posts"])
async def create_post(post: PostSchema, db: AsyncSession = Depends(get_db)):
    # Log the user's attempt
    logger.info("Post endpoint called")

    # Get the user's email from the JWT token
    user_email = JWTBearer.extract_jwt_email()

    # Find the user by email
    result = await db.execute(select(User).filter(User.email == user_email))
    user = result.scalar_one_or_none()

    if not user:
        logger.warning("User not found")
        raise HTTPException(status_code=404, detail="User not found")

    # Log the post data before adding to the database
    logger.info(f"Creating post: Title: {post.title}, Text: {post.text}, Owner ID: {user.id}")

    # Create the new post and associate it with the user
    new_post = Post(title=post.title, text=post.text, owner_id=user.id)
    db.add(new_post)

    # Commit the transaction
    await db.commit()

    # Refresh the session to update the state of the objects
    await db.refresh(new_post)

    # Log the post data after adding to the database
    logger.info(f"Post added successfully: Title: {new_post.title}, Text: {new_post.text}, Owner ID: {new_post.owner_id}")

    return {"data": "Post added successfully"}




@app.post("/posts", dependencies=[Depends(JWTBearer())], tags=["posts"])
async def create_post(
    post: PostSchema,
    db: AsyncSession = Depends(get_db),
    user_email: str = Depends(JWTBearer())
):
    print(f"user_email: {user_email}")  # Add this line
    logger.info("Post endpoint called")

    # Find the user by email
    result = await db.execute(select(User).filter(User.email == user_email))
    user = result.scalar_one_or_none()
    if not user:
        logger.warning("User not found")
        raise HTTPException(status_code=404, detail="User not found")

    # Log the post data before adding to the database
    logger.info(f"Creating post: Title: {post.title}, Text: {post.text}, Owner ID: {user.id}")

    # Create the new post and associate it with the user
    new_post = Post(title=post.title, text=post.text, owner_id=user.id)
    db.add(new_post)

    # Commit the transaction
    await db.commit()

    # Refresh the session to update the state of the objects
    await db.refresh(new_post)

    # Log the post data after adding to the database
    logger.info(f"Post added successfully: Title: {new_post.title}, Text: {new_post.text}, Owner ID: {new_post.owner_id}")

    return {"message": "Post created successfully", "post_id": new_post.id}

@app.post("/user/sign_up", tags=["user"])
async def create_user(user: UserSchema = Body(default=None), db: AsyncSession = Depends(get_db)):
    logger.info("User sign-up endpoint called")
    new_user = User(email=user.email, password=user.password)
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return signJWT(user.email)

async def check_user(data: UserLoginSchema, db: AsyncSession):
    result = await db.execute(select(User).filter(User.email == data.email))
    user = result.scalar_one_or_none()
    if user:
        if user.password == data.password:
            return {"status": True, "message": "Valid credentials"}
        else:
            return {"status": False, "message": "Invalid password"}
    else:
        return {"status": False, "message": "User does not exist"}

@app.post("/user/login", tags=["user"])
async def user_login(user: UserLoginSchema = Body(...), db: AsyncSession = Depends(get_db)):
    logger.info("User login endpoint called")
    check_result = await check_user(user, db)
    if check_result["status"]:
        return signJWT(user.email)
    else:
        raise HTTPException(status_code=401, detail=check_result["message"])

@app.get("/error")
async def error_endpoint():
    logger.error("Error endpoint called")
    raise HTTPException(status_code=400, detail="This is a sample error")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
 
D:\Desktop\g_api\main.py 
import uvicorn
from fastapi import FastAPI, Body, HTTPException, Depends
from starlette.responses import HTMLResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import logging
from database.database import SessionLocal, init_db
from database.models import Post, User
from app.model import PostSchema, UserSchema, UserLoginSchema
from app.auth.jwt_handler import signJWT
from app.auth.jwt_bearer import JWTBearer



# Configure the logger
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name=s) - %(levelname=s) - %(message=s)',
                    handlers=[
                        logging.FileHandler("app.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# Create a FastAPI "instance"
app = FastAPI()

# Dependency to get the DB session
async def get_db():
    async with SessionLocal() as session:
        yield session

@app.on_event("startup")
async def on_startup():
    await init_db()

@app.get("/", tags=["test"], response_class=HTMLResponse)
async def root():
    html_content = """
    <html>
    <head>
        <title>Root</title>
    </head>
    <body>
        <h1>Welcome to the Geodata API!</h1>
        <p>This is an HTML representation of the root endpoint.</p>
        <p><a href="/docs">Click here to go to the documentation</a></p>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/posts", tags=["posts"])
async def get_posts(db: AsyncSession = Depends(get_db)):
    logger.info("Posts endpoint called")
    result = await db.execute(select(Post))
    posts = result.scalars().all()
    return posts

@app.get("/posts/{id}", tags=["posts"])
async def get_post(id: int, db: AsyncSession = Depends(get_db)):
    logger.info(f"Post/{id} endpoint called")
    result = await db.execute(select(Post).filter(Post.id == id))
    post = result.scalar_one_or_none()
    if post is None:
        raise HTTPException(status_code=404, detail="Post not found")
    return post


from fastapi import FastAPI, Body, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import logging
from database.database import SessionLocal
from app.model import PostSchema
from app.auth.jwt_bearer import JWTBearer
from database.models import Post, User

# Configure the logger
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name=s) - %(levelname=s) - %(message=s)',
                    handlers=[
                        logging.FileHandler("app.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# Create a FastAPI "instance"
app = FastAPI()

# Dependency to get the DB session
async def get_db():
    async with SessionLocal() as session:
        yield session

# Route to post a new post, requires authentication
@app.post("/posts1", dependencies=[Depends(JWTBearer())], tags=["posts"])
async def create_post(post: PostSchema, db: AsyncSession = Depends(get_db)):
    # Log the user's attempt
    logger.info("Post endpoint called")

    # Get the user's email from the JWT token
    user_email = JWTBearer.extract_jwt_email()

    # Find the user by email
    result = await db.execute(select(User).filter(User.email == user_email))
    user = result.scalar_one_or_none()

    if not user:
        logger.warning("User not found")
        raise HTTPException(status_code=404, detail="User not found")

    # Log the post data before adding to the database
    logger.info(f"Creating post: Title: {post.title}, Text: {post.text}, Owner ID: {user.id}")

    # Create the new post and associate it with the user
    new_post = Post(title=post.title, text=post.text, owner_id=user.id)
    db.add(new_post)

    # Commit the transaction
    await db.commit()

    # Refresh the session to update the state of the objects
    await db.refresh(new_post)

    # Log the post data after adding to the database
    logger.info(f"Post added successfully: Title: {new_post.title}, Text: {new_post.text}, Owner ID: {new_post.owner_id}")

    return {"data": "Post added successfully"}




@app.post("/posts", dependencies=[Depends(JWTBearer())], tags=["posts"])
async def create_post(
    post: PostSchema,
    db: AsyncSession = Depends(get_db),
    user_email: str = Depends(JWTBearer())
):
    print(f"user_email: {user_email}")  # Add this line
    logger.info("Post endpoint called")

    # Find the user by email
    result = await db.execute(select(User).filter(User.email == user_email))
    user = result.scalar_one_or_none()
    if not user:
        logger.warning("User not found")
        raise HTTPException(status_code=404, detail="User not found")

    # Log the post data before adding to the database
    logger.info(f"Creating post: Title: {post.title}, Text: {post.text}, Owner ID: {user.id}")

    # Create the new post and associate it with the user
    new_post = Post(title=post.title, text=post.text, owner_id=user.id)
    db.add(new_post)

    # Commit the transaction
    await db.commit()

    # Refresh the session to update the state of the objects
    await db.refresh(new_post)

    # Log the post data after adding to the database
    logger.info(f"Post added successfully: Title: {new_post.title}, Text: {new_post.text}, Owner ID: {new_post.owner_id}")

    return {"message": "Post created successfully", "post_id": new_post.id}

@app.post("/user/sign_up", tags=["user"])
async def create_user(user: UserSchema = Body(default=None), db: AsyncSession = Depends(get_db)):
    logger.info("User sign-up endpoint called")
    new_user = User(email=user.email, password=user.password)
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)
    return signJWT(user.email)

async def check_user(data: UserLoginSchema, db: AsyncSession):
    result = await db.execute(select(User).filter(User.email == data.email))
    user = result.scalar_one_or_none()
    if user:
        if user.password == data.password:
            return {"status": True, "message": "Valid credentials"}
        else:
            return {"status": False, "message": "Invalid password"}
    else:
        return {"status": False, "message": "User does not exist"}

@app.post("/user/login", tags=["user"])
async def user_login(user: UserLoginSchema = Body(...), db: AsyncSession = Depends(get_db)):
    logger.info("User login endpoint called")
    check_result = await check_user(user, db)
    if check_result["status"]:
        return signJWT(user.email)
    else:
        raise HTTPException(status_code=401, detail=check_result["message"])

@app.get("/error")
async def error_endpoint():
    logger.error("Error endpoint called")
    raise HTTPException(status_code=400, detail="This is a sample error")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
 
D:\Desktop\g_api\app\model.py 
# app/model.py

from pydantic import BaseModel

class PostSchema(BaseModel):
    title: str
    text: str
    
    # No need to include owner_id here since it will be assigned automatically

class UserSchema(BaseModel):
    email: str
    password: str

class UserLoginSchema(BaseModel):
    email: str
    password: str
 
D:\Desktop\g_api\app\auth\jwt_bearer.py 
from typing import Union
from fastapi import Request, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from .jwt_handler import decodeJWT

class JWTBearer(HTTPBearer):
    def __init__(self, auto_error: bool = True):
        super(JWTBearer, self).__init__(auto_error=auto_error)

    async def __call__(self, request: Request):
        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)
        if credentials:
            if not credentials.scheme == "Bearer":
                raise HTTPException(status_code=403, detail="Invalid authentication scheme.")
            if not self.verify_jwt(credentials.credentials):
                raise HTTPException(status_code=403, detail="Invalid token or expired token.")
            return credentials.credentials
        else:
            raise HTTPException(status_code=403, detail="Invalid authorization code.")

    def verify_jwt(self, jwtoken: str) -> Union[bool, dict]:
        isTokenValid: bool = False
        payload = None

        try:
            payload = decodeJWT(jwtoken)
            print("Decoded JWT payload:", payload)  # Print the decoded payload
        except Exception as e:
            print("Exception occurred while decoding JWT:", e)
            payload = None

        if payload:
            isTokenValid = True
            return payload  # Return the payload if the token is valid

        return isTokenValid 
 
D:\Desktop\g_api\app\auth\jwt_handler.py 
# This file is responsible for signing , encoding , decoding and returning JWTS
import time
from typing import Dict
import jwt
from decouple import config

JWT_SECRET_KEY = config('SECRET', default='secret')
DEBUG = config('DEBUG', default=True, cast=bool)
# algorithm used to sign the token
JWT_ALGORITHM = 'HS256'

print(f"Secret Key: {JWT_SECRET_KEY}")
print(f"Debug Mode: {DEBUG}")
print(f"Secret Algorithm: {JWT_ALGORITHM}")




# create function to return generated tokens (JWTs)
def create_access_token(token: str):
    return {
        "access token": token
        # what happens is that these JSN tokens are encoded into str
    }
    

# Function used for signing the JWT string
def signJWT(userID: str):
    payload = {
        "userID" : userID,
        "expiry" : time.time() + 6000
    }
    token = jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    # we pass the token as input in the token response
    return create_access_token(token)

# Function that 
def decodeJWT(token: str):
    try:

        decode_token = jwt.decode(token, JWT_SECRET_KEY,algorithms=JWT_ALGORITHM)
        return decode_token if decode_token["expires"] >= time.time() else None
    except:
        return {} 
D:\Desktop\g_api\database\database.py 
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base

# Update the SQLAlchemy database URL for PostgreSQL
DATABASE_URL = "postgresql+asyncpg://postgres:123@localhost:5432/geodata"

# Create a SQLAlchemy async engine
engine = create_async_engine(DATABASE_URL, echo=True)

# Create a session local class with the async engine
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)

# Create a base class for SQLAlchemy models
Base = declarative_base()

async def init_db():
    async with engine.begin() as conn:
        # Reflect existing tables
        existing_tables = await conn.run_sync(Base.metadata.reflect)

        # Check if any tables exist
        if not existing_tables:
            # If no tables exist, create all tables
            await conn.run_sync(Base.metadata.create_all)
        else:
            # If tables exist, continue without dropping and recreating
            print("Database tables already exist. Skipping creation.")
 
D:\Desktop\g_api\database\models.py 
# database/models.py

from sqlalchemy import Column, Integer, String, ForeignKey, Text
from sqlalchemy.orm import relationship
from .database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    password = Column(String, nullable=False)
    posts = relationship("Post", back_populates="owner")

class Post(Base):
    __tablename__ = "posts"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True, nullable=False)
    text = Column(Text, nullable=False)
    owner_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    owner = relationship("User", back_populates="posts") 
D:\Desktop\g_api\database\__init__.py 
 
